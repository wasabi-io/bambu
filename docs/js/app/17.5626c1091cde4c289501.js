(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{1024:function(n,e,o){"use strict";var t,r=this&&this.__extends||(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var o in e)e.hasOwnProperty(o)&&(n[o]=e[o])},function(n,e){function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var l=o(1),i=o(530),a=o(533),p=o(534),c=o(72),d=o(2),m={basic:o(1025),dropdownContent:o(1026),hoverable:o(1027),right:o(1028),dropup:o(1029)},s=function(n){function e(){return null!==n&&n.apply(this,arguments)||this}return r(e,n),e.prototype.render=function(){return l.createElement("div",{className:a.default.bdContent},l.createElement("div",{className:a.default.content},l.createElement("p",null,"The ",l.createElement("code",null,"<Dropdown />")," component is a container for a dropdown button and a dropdown menu."),l.createElement("ul",null,l.createElement("li",null,l.createElement("code",null,"<Dropdown />")," the ",l.createElement("strong",null,"main")," container",l.createElement("ul",null,l.createElement("li",null,l.createElement("code",null,"<DropdownTrigger />")," the container for a ",l.createElement("code",null,"button")),l.createElement("li",null,l.createElement("code",null,"<DropdownMenu />")," the toggable menu, ",l.createElement("strong",null,"hidden")," by default",l.createElement("ul",null,l.createElement("li",null,l.createElement("code",null,"<DropdownContent />")," the dropdown ",l.createElement("strong",null,"box"),", with a white background and a shadow",l.createElement("ul",null,l.createElement("li",null,l.createElement("code",null,"<DropdownItem />")," each ",l.createElement("strong",null,"single item")," of the dropdown, which can either be a ",l.createElement("code",null,"a")," or a ",l.createElement("code",null,"div")),l.createElement("li",null,l.createElement("code",null,"<DropdownDivider />")," a ",l.createElement("strong",null,"horizontal line")," to separate dropdown items")))))))),l.createElement(p.default,{codes:[m.basic]}),l.createElement("br",null),l.createElement("hr",null),l.createElement(p.default,{title:"Dropdown content",codes:[m.dropdownContent]},l.createElement("p",null,"While the ",l.createElement("code",null,"<DropdownItem />")," can be used;",l.createElement("ul",null,l.createElement("li",null,"as an ",l.createElement("strong",null,"anchor link")," with ",l.createElement("code",null,'tagName="a"')," property or when ",l.createElement("code",null,"href")," property defined then it will be an anchor link as automatically."),l.createElement("li",null,"as a ",l.createElement("strong",null,"div")," ",l.createElement("code",null,'tagName="div"')," and insert almost ",l.createElement("strong",null,"any type of content"),".")))),l.createElement("br",null),l.createElement("hr",null),l.createElement(p.default,{title:"Hoverable or Toggable",codes:[m.hoverable]},l.createElement("p",null,"The ",l.createElement("code",null,"dropdown")," component has ",l.createElement("strong",null,"2 additional modifiers")),l.createElement("ul",null,l.createElement("li",null,l.createElement("code",null,"is-hoverable"),": the dropdown will show up when ",l.createElement("strong",null,"hovering")," the ",l.createElement("code",null,"dropdown-trigger")),l.createElement("li",null,l.createElement("code",null,"is-active"),": the dropdown will show up ",l.createElement("strong",null,"all the time"))),l.createElement(c.Message,{color:d.Color.success},l.createElement(c.MessageBody,null,"While the CSS ",l.createElement("code",null,":hover")," implementation works perfectly, the ",l.createElement("code",null,"is-active")," class is available for users who want to control the display of the dropdown with ",l.createElement("strong",null,"JavaScript"),"."))),l.createElement("br",null),l.createElement("hr",null),l.createElement(p.default,{title:"Hoverable or Toggable",codes:[m.right]},l.createElement("p",null,"The ",l.createElement("code",null,"dropdown")," component has ",l.createElement("strong",null,"2 additional modifiers")),l.createElement("ul",null,l.createElement("li",null,l.createElement("code",null,"is-hoverable"),": the dropdown will show up when ",l.createElement("strong",null,"hovering")," the ",l.createElement("code",null,"dropdown-trigger")),l.createElement("li",null,l.createElement("code",null,"is-active"),": the dropdown will show up ",l.createElement("strong",null,"all the time"))),l.createElement(c.Message,{color:d.Color.success},l.createElement(c.MessageBody,null,"While the CSS ",l.createElement("code",null,":hover")," implementation works perfectly, the ",l.createElement("code",null,"is-active")," class is available for users who want to control the display of the dropdown with ",l.createElement("strong",null,"JavaScript"),"."))),l.createElement("br",null),l.createElement("hr",null),l.createElement(p.default,{title:"Dropup",codes:[m.dropup]},l.createElement("p",null,"You can add the ",l.createElement("code",null,"is-up")," modifier to have a dropdown menu that appears above the dropdown button."))))},e}(i.Stateless);e.default=s},1025:function(n,e){n.exports='import * as React from "react";\nimport {Dropdown, DropdownContent, DropdownDivider, DropdownItem, DropdownMenu, DropdownTrigger} from "bambu/lib/components/dropdown";\nimport {Button} from "bambu/lib/elements/button";\nimport {FaIcon, Icon} from "bambu/lib/elements/icon";\nimport {observer} from "mobx-react";\nimport {observable} from "mobx";\n\n@observer\nexport default class Index extends React.Component<{}, {}> {\n    @observable\n    private isActive: boolean = true;\n\n    public constructor(props: {}) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <Dropdown isActive={this.isActive}>\n                <DropdownTrigger onClick={this.onClick}>\n                    <Button>\n                        <span>Dropdown button</span>\n                        <Icon>\n                            <FaIcon name="angle-down"/>\n                        </Icon>\n                    </Button>\n                </DropdownTrigger>\n                <DropdownMenu>\n                    <DropdownContent>\n                        <DropdownItem href="#">Dropdown item</DropdownItem>\n                        <DropdownItem href="#">Other dropdown item</DropdownItem>\n                        <DropdownItem href="#" isActive>Active dropdown item</DropdownItem>\n                        <DropdownItem href="#">Other dropdown item</DropdownItem>\n                        <DropdownDivider/>\n                        <DropdownItem href="#"> With a divider</DropdownItem>\n                    </DropdownContent>\n                </DropdownMenu>\n            </Dropdown>\n        );\n    }\n\n    public onClick = (e: any) => {\n        this.isActive = !this.isActive;\n    }\n}\n'},1026:function(n,e){n.exports='import * as React from "react";\nimport {Dropdown, DropdownContent, DropdownDivider, DropdownItem, DropdownMenu, DropdownTrigger} from "bambu/lib/components/dropdown";\nimport {Button} from "bambu/lib/elements/button";\nimport {FaIcon, Icon} from "bambu/lib/elements/icon";\nimport {observer} from "mobx-react";\nimport {observable} from "mobx";\nimport {Size} from "bambu";\n\n@observer\nexport default class Index extends React.Component<{}, {}> {\n    @observable\n    private isActive: boolean = true;\n\n    public constructor(props: {}) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <Dropdown isActive={this.isActive}>\n                <DropdownTrigger onClick={this.onClick}>\n                    <Button>\n                        <span>Content</span>\n                        <Icon bSize={Size.small}>\n                            <FaIcon name="angle-down"/>\n                        </Icon>\n                    </Button>\n                </DropdownTrigger>\n                <DropdownMenu>\n                    <DropdownContent>\n                        <DropdownItem>\n                            <p>You can insert <strong>any type of content</strong> within the dropdown menu.</p>\n                        </DropdownItem>\n                        <DropdownDivider/>\n                        <DropdownItem>\n                            <p>You simply need to use a <code>&lt;div&gt;</code> instead.</p>\n                        </DropdownItem>\n                        <DropdownItem href="#"> This is a link</DropdownItem>\n                    </DropdownContent>\n                </DropdownMenu>\n            </Dropdown>\n        );\n    }\n\n    public onClick = (e: any) => {\n        this.isActive = !this.isActive;\n    }\n}\n'},1027:function(n,e){n.exports='import * as React from "react";\nimport {Dropdown, DropdownContent, DropdownDivider, DropdownItem, DropdownMenu, DropdownTrigger} from "bambu/lib/components/dropdown";\nimport {Button} from "bambu/lib/elements/button";\nimport {FaIcon, Icon} from "bambu/lib/elements/icon";\nimport {observer} from "mobx-react";\nimport {observable} from "mobx";\nimport {Size} from "bambu";\n\n@observer\nexport default class Index extends React.Component<{}, {}> {\n    @observable\n    private isActive: boolean = false;\n\n    public constructor(props: {}) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <div>\n                <Dropdown isActive={this.isActive}>\n                    <DropdownTrigger onClick={this.onClick}>\n                        <Button>\n                            <span>Click me</span>\n                            <Icon bSize={Size.small}>\n                                <FaIcon name="angle-down"/>\n                            </Icon>\n                        </Button>\n                    </DropdownTrigger>\n                    <DropdownMenu>\n                        <DropdownContent>\n                            <DropdownItem href="#">Overview</DropdownItem>\n                            <DropdownItem href="#">Modifiers</DropdownItem>\n                            <DropdownItem href="#">Grid</DropdownItem>\n                            <DropdownItem href="#">Form</DropdownItem>\n                            <DropdownItem href="#">Elements</DropdownItem>\n                            <DropdownItem href="#">Components</DropdownItem>\n                            <DropdownItem href="#">Layout</DropdownItem>\n                            <DropdownDivider/>\n                            <DropdownItem href="#">More</DropdownItem>\n                        </DropdownContent>\n                    </DropdownMenu>\n                </Dropdown>\n                <Dropdown isHoverable>\n                    <DropdownTrigger>\n                        <Button>\n                            <span>Hover me</span>\n                            <Icon bSize={Size.small}>\n                                <FaIcon name="angle-down"/>\n                            </Icon>\n                        </Button>\n                    </DropdownTrigger>\n                    <DropdownMenu>\n                        <DropdownContent>\n                            <DropdownItem>\n                                <p>You can insert <strong>any type of content</strong> within the dropdown menu.</p>\n                            </DropdownItem>\n                        </DropdownContent>\n                    </DropdownMenu>\n                </Dropdown>\n            </div>\n        );\n    }\n\n    public onClick = (e: any) => {\n        this.isActive = !this.isActive;\n    }\n\n}\n'},1028:function(n,e){n.exports='import * as React from "react";\nimport {Dropdown, DropdownContent, DropdownItem, DropdownMenu, DropdownTrigger} from "bambu/lib/components/dropdown";\nimport {Button} from "bambu/lib/elements/button";\nimport {FaIcon, Icon} from "bambu/lib/elements/icon";\nimport {observer} from "mobx-react";\nimport {observable} from "mobx";\nimport {bulma, Size} from "bambu";\nimport Level from "bambu/lib/components/level/Level";\nimport {LevelItem, LevelLeft, LevelRight} from "bambu/lib/components/level";\n\n@observer\nexport default class Index extends React.Component<{}, {}> {\n    @observable\n    private isActive: boolean = false;\n\n    @observable\n    private isRightActive: boolean = false;\n\n    public constructor(props: {}) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <div>\n                <Level className={bulma.isMobile}>\n                    <LevelLeft>\n                        <LevelItem>\n                            <Dropdown isActive={this.isActive}>\n                                <DropdownTrigger onClick={this.onClick}>\n                                    <Button>\n                                        <span>Left aligned</span>\n                                        <Icon bSize={Size.small}>\n                                            <FaIcon name="angle-down"/>\n                                        </Icon>\n                                    </Button>\n                                </DropdownTrigger>\n                                <DropdownMenu>\n                                    <DropdownContent>\n                                        <DropdownItem>\n                                            <p>The dropdown is <strong>left-aligned</strong> by default.</p>\n                                        </DropdownItem>\n                                    </DropdownContent>\n                                </DropdownMenu>\n                            </Dropdown>\n                        </LevelItem>\n                    </LevelLeft>\n                    <LevelRight>\n                        <LevelItem>\n                            <Dropdown isActive={this.isRightActive} isRight>\n                                <DropdownTrigger onClick={this.onClickRight}>\n                                    <Button>\n                                        <span>Right aligned</span>\n                                        <Icon bSize={Size.small}>\n                                            <FaIcon name="angle-down"/>\n                                        </Icon>\n                                    </Button>\n                                </DropdownTrigger>\n                                <DropdownMenu>\n                                    <DropdownContent>\n                                        <DropdownItem>\n                                            <p>Add the <code>is-right</code> modifier for a <strong>right-aligned</strong> dropdown.</p>\n                                        </DropdownItem>\n                                    </DropdownContent>\n                                </DropdownMenu>\n                            </Dropdown>\n                        </LevelItem>\n                    </LevelRight>\n                </Level>\n            </div>\n        );\n    }\n\n    public onClick = (e: any) => {\n        this.isActive = !this.isActive;\n    }\n\n    public onClickRight = (e: any) => {\n        this.isRightActive = !this.isRightActive;\n    }\n\n}\n'},1029:function(n,e){n.exports='import * as React from "react";\nimport {Dropdown, DropdownContent, DropdownItem, DropdownMenu, DropdownTrigger} from "bambu/lib/components/dropdown";\nimport {Button} from "bambu/lib/elements/button";\nimport {FaIcon, Icon} from "bambu/lib/elements/icon";\nimport {observer} from "mobx-react";\nimport {observable} from "mobx";\n\n@observer\nexport default class Index extends React.Component<{}, {}> {\n    @observable\n    private isActive: boolean = false;\n\n    @observable\n    private isRightActive: boolean = false;\n\n    public constructor(props: {}) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <Dropdown isActive={this.isActive} isUp>\n                <DropdownTrigger onClick={this.onClick}>\n                    <Button>\n                        <span>Dropup button</span>\n                        <Icon>\n                            <FaIcon name="angle-up"/>\n                        </Icon>\n                    </Button>\n                </DropdownTrigger>\n                <DropdownMenu>\n                    <DropdownContent>\n                        <DropdownItem>\n                            <p>You can add the <code>is-up</code> modifier to have a dropdown menu that appears above the dropdown button.</p>\n                        </DropdownItem>\n                    </DropdownContent>\n                </DropdownMenu>\n            </Dropdown>\n        );\n    }\n\n    public onClick = (e: any) => {\n        this.isActive = !this.isActive;\n    }\n\n    public onClickRight = (e: any) => {\n        this.isRightActive = !this.isRightActive;\n    }\n\n}\n'}}]);