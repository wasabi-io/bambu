(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{827:function(e,n,l){"use strict";var t,o=this&&this.__extends||(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var l in n)n.hasOwnProperty(l)&&(e[l]=n[l])},function(e,n){function l(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(l.prototype=n.prototype,new l)});Object.defineProperty(n,"__esModule",{value:!0});var u=l(1),m=l(530),r=l(534),i=l(48),c=l(2),s=l(46),a=l(126),C=l(72),E={sizes:l(828),columnStytem12:l(829)},d=function(e){return"cSize={ColumnSize."+e+'} || cSize="'+a.ColumnSize[e]+'"'},f=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return o(n,e),n.prototype.render=function(){return u.createElement("div",null,u.createElement(s.Content,null,u.createElement("p",null,"If you want to change the ",u.createElement("strong",null,"size")," of a single column, you can use one of the following classes:"),u.createElement("ul",null,u.createElement("li",null,u.createElement("code",null,d("isThreeQuarters"))),u.createElement("li",null,u.createElement("code",null,d("isTwoThirds"))),u.createElement("li",null,u.createElement("code",null,d("isHalf"))),u.createElement("li",null,u.createElement("code",null,d("isOneThird"))),u.createElement("li",null,u.createElement("code",null,d("isOneQuarter")))),u.createElement("p",null,"The ",u.createElement("em",null,"other")," columns will fill up the ",u.createElement("strong",null,"remaining")," space automatically.")),u.createElement(i.Tags,null,u.createElement(i.Tag,null,"New!"),u.createElement(i.Tag,{color:c.Color.info},"0.6.1")),u.createElement(s.Content,null,u.createElement("p",null,"You can now use the following multiples of ",u.createElement("code",null,"20%")," as well:"),u.createElement("ul",null,u.createElement("li",null,u.createElement("code",null,d("isFourFifths"))),u.createElement("li",null,u.createElement("code",null,d("isThreeFifths"))),u.createElement("li",null,u.createElement("code",null,d("isTwoFifths"))),u.createElement("li",null,u.createElement("code",null,d("isOneFifth"))))),u.createElement(r.default,{vertical:!0,hideCode:!0,codes:[E.sizes]}),u.createElement("hr",null),u.createElement(r.default,{vertical:!0,hideCode:!0,title:"12 columns system",codes:[E.columnStytem12]},u.createElement(s.Content,null,u.createElement("p",null,"As the grid can be divided into ",u.createElement("strong",null,"12")," columns, there are size classes for each division:"),u.createElement("ul",null,u.createElement("li",null,u.createElement("code",null,"is-2")),u.createElement("li",null,u.createElement("code",null,"is-3")),u.createElement("li",null,u.createElement("code",null,"is-4")),u.createElement("li",null,u.createElement("code",null,"is-5")),u.createElement("li",null,u.createElement("code",null,"is-6")),u.createElement("li",null,u.createElement("code",null,"is-7")),u.createElement("li",null,u.createElement("code",null,"is-8")),u.createElement("li",null,u.createElement("code",null,"is-9")),u.createElement("li",null,u.createElement("code",null,"is-10")),u.createElement("li",null,u.createElement("code",null,"is-11")))),u.createElement(C.Message,{color:c.Color.info},u.createElement(C.MessageHeader,null,"Naming convention"),u.createElement(C.MessageBody,null,"Each modifier class is named after ",u.createElement("strong",null,"how many columns you want out of 12"),". So if you want 7 columns out of 12, use ",u.createElement("code",null,"is-7"),"."))))},n}(m.Stateless);n.default=f},828:function(e,n){e.exports='import * as React from \'react\';\nimport Columns from "bambu/lib/grid/column/Columns";\nimport Column, {ColumnSize} from "bambu/lib/grid/column/Column";\n\nconst Index: React.SFC<{}> = (props: {}) => {\n    return (\n        <div>\n            <Columns>\n                <Column cSize={ColumnSize.isFourFifths}>is-four-fifths</Column>\n                <Column>Auto</Column>\n                <Column>Auto</Column>\n            </Columns>\n            <Columns>\n                <Column cSize={ColumnSize.isThreeQuarters}>is-three-quarters</Column>\n                <Column>Auto</Column>\n                <Column>Auto</Column>\n            </Columns>\n            <Columns>\n                <Column cSize={ColumnSize.isTwoThirds}>is-two-thirds</Column>\n                <Column>Auto</Column>\n                <Column>Auto</Column>\n            </Columns>\n            <Columns>\n                <Column cSize={ColumnSize.isThreeFifths}>is-three-fifths</Column>\n                <Column>Auto</Column>\n                <Column>Auto</Column>\n            </Columns>\n            <Columns>\n                <Column cSize={ColumnSize.isHalf}>is-half</Column>\n                <Column>Auto</Column>\n                <Column>Auto</Column>\n            </Columns>\n            <Columns>\n                <Column cSize={ColumnSize.isTwoFifths}>is-two-fifths</Column>\n                <Column>Auto</Column>\n                <Column>Auto</Column>\n            </Columns>\n            <Columns>\n                <Column cSize={ColumnSize.isOneThird}>is-one-third</Column>\n                <Column>Auto</Column>\n                <Column>Auto</Column>\n            </Columns>\n            <Columns>\n                <Column cSize={ColumnSize.isOneQuarter}>is-one-quarter</Column>\n                <Column>Auto</Column>\n            </Columns>\n            <Columns>\n                <Column cSize={ColumnSize.isOneFifth}>is-one-fifth</Column>\n                <Column>Auto</Column>\n                <Column>Auto</Column>\n            </Columns>\n        </div>\n    );\n};\n\nexport default Index;\n'},829:function(e,n){e.exports='import * as React from \'react\';\nimport Columns from "bambu/lib/grid/column/Columns";\nimport {Column, RowSpan} from "bambu/lib/grid/column";\nimport {Color} from "bambu";\n\nconst generateColumn = (rowSpan: number) => {\n    const elements: JSX.Element[] = [\n        <Column color={Color.info} rowSpan={rowSpan as RowSpan}>{rowSpan}</Column>\n    ];\n    for (let i = rowSpan; i < 12; i = i + 1) {\n        elements.push(<Column>1</Column>);\n    }\n    return elements;\n};\n\nconst Index: React.SFC<{}> = (props: {}) => {\n    const elements: JSX.Element[] = [];\n    for (let i = 2; i < 12; i = i + 1) {\n        elements.push(<Columns>{generateColumn(i as RowSpan)}</Columns>);\n    }\n    return (\n        <div>\n            {elements}\n        </div>\n    );\n};\n\nexport default Index;\n'}}]);